// <auto-generated />
using System;
using KartoshkaEvent.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KartoshkaEvent.DataAccess.Migrations
{
    [DbContext(typeof(KartoshkaEventContext))]
    [Migration("20250615074703_AddForeignKeyEventTime")]
    partial class AddForeignKeyEventTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventTag", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Event_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("Event", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.EventImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("EventImage_pkey");

                    b.HasIndex("EventId");

                    b.ToTable("EventImage", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.InfoRejectedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("InfoRejectedEvent_pkey");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("InfoRejectedEvent", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Mood")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfhouse")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("EventAddress_pkey");

                    b.HasIndex("EventId");

                    b.ToTable("EventAddress", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedByRemoteIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Refreshtoken_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("RefreshToken", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Tag_pkey");

                    b.ToTable("Tag", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventLocationId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Ticket_pkey");

                    b.HasIndex("BuyerId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventLocationId");

                    b.ToTable("Ticket", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.TicketInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("TicketInfo_pkey");

                    b.ToTable("TicketInfo", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.TimeOfEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("EventTime_pkey");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("EventTime", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.ToTable("User", "KartoshkaEvent");
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartoshkaEvent.Domain.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Event", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.User", "Owner")
                        .WithMany("Events")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.EventImage", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.InfoRejectedEvent", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Location", "Address")
                        .WithOne("InfoRejectedEvent")
                        .HasForeignKey("KartoshkaEvent.Domain.Models.InfoRejectedEvent", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Location", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Event", "Event")
                        .WithMany("LocationsOfEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartoshkaEvent.Domain.Models.TicketInfo", "TicketInfo")
                        .WithOne("Address")
                        .HasForeignKey("KartoshkaEvent.Domain.Models.Location", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TicketInfo");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.User", "Owner")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Ticket", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.User", "Buyer")
                        .WithMany("Tickets")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartoshkaEvent.Domain.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartoshkaEvent.Domain.Models.Location", "EventLocation")
                        .WithMany("Tickets")
                        .HasForeignKey("EventLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Event");

                    b.Navigation("EventLocation");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.TimeOfEvent", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Location", "Location")
                        .WithOne("TimeOfEvent")
                        .HasForeignKey("KartoshkaEvent.Domain.Models.TimeOfEvent", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Event", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("LocationsOfEvents");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Location", b =>
                {
                    b.Navigation("InfoRejectedEvent");

                    b.Navigation("Tickets");

                    b.Navigation("TimeOfEvent")
                        .IsRequired();
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.TicketInfo", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
