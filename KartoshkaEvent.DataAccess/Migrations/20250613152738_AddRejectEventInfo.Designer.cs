// <auto-generated />
using System;
using KartoshkaEvent.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KartoshkaEvent.DataAccess.Migrations
{
    [DbContext(typeof(KartoshkaEventContext))]
    [Migration("20250613152738_AddRejectEventInfo")]
    partial class AddRejectEventInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventTag", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Mood")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfhouse")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceOfTicket")
                        .HasColumnType("numeric");

                    b.Property<long>("QuantityOfTickets")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("EventAddress_pkey");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("EventAddress", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Event_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("Event", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.EventImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("EventImage_pkey");

                    b.HasIndex("EventId");

                    b.ToTable("EventImage", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.InfoRejectedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("InfoRejectedEvent_pkey");

                    b.ToTable("InfoRejectedEvent", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedByRemoteIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Refreshtoken_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("RefreshToken", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Tag_pkey");

                    b.ToTable("Tag", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.TimeOfEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("EventTime_pkey");

                    b.ToTable("EventTime", "KartoshkaEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.ToTable("User", "KartoshkaEvent");
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartoshkaEvent.Domain.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Address", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Event", "Event")
                        .WithMany("AddressesOfEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartoshkaEvent.Domain.Models.InfoRejectedEvent", "InfoRejectedEvent")
                        .WithOne("Address")
                        .HasForeignKey("KartoshkaEvent.Domain.Models.Address", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("InfoRejectedEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Event", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.EventImage", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.User", "Owner")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.TimeOfEvent", b =>
                {
                    b.HasOne("KartoshkaEvent.Domain.Models.Address", "AddressOfEvent")
                        .WithOne("TimeOfEvent")
                        .HasForeignKey("KartoshkaEvent.Domain.Models.TimeOfEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressOfEvent");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Address", b =>
                {
                    b.Navigation("TimeOfEvent")
                        .IsRequired();
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.Event", b =>
                {
                    b.Navigation("AddressesOfEvents");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.InfoRejectedEvent", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("KartoshkaEvent.Domain.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
